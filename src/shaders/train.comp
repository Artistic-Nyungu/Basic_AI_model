#version 460 core
#extension GL_ARB_compute_shader : require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Range {
    int begin;
    int end;
};

struct ForwardingLayer {
    Range nodes;
    Range weights;
    Range biases;
    int srcNodes;
    int dstNodes;
};

layout(std430, binding = 0) buffer NodesBuffer { float nodes[]; };
layout(std430, binding = 1) buffer WeightsBuffer { float weights[]; };
layout(std430, binding = 2) buffer BiasesBuffer { float biases[]; };
layout(std430, binding = 3) buffer ForwardingLayersBuffer { ForwardingLayer layers[]; };

uniform int layerIdx;

void main() {
    int neuronIdx = int(gl_GlobalInvocationID.x);

    ForwardingLayer layer = layers[layerIdx];
    if (neuronIdx >= layer.dstNodes) return;

    int dstNodeIdx = layer.nodes.begin + neuronIdx;
    float sum = 0.0f;

    // Previous layer's nodes start at current begin minus srcNodes
    int prevLayerStart = layer.nodes.begin - layer.srcNodes;
    for (int i = 0; i < layer.srcNodes; i++) {
        int srcNodeIdx = prevLayerStart + i;
        int weightIdx = layer.weights.begin + neuronIdx * layer.srcNodes + i;
        sum += nodes[srcNodeIdx] * weights[weightIdx];
    }

    sum += biases[layer.biases.begin + neuronIdx];
    nodes[dstNodeIdx] = log(1.0f + exp(sum)); // Softplus activation
}