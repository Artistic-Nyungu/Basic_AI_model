#version 460 core
#extension GL_ARB_compute_shader : require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Range {
    int begin;
    int end;
};

struct ForwardingLayer {
    Range neurons;
    Range weights;
    Range biases;
    int srcNeurons;
    int dstNeurons;
};

layout(std430, binding = 0) buffer NeuronsBuffer { float neurons[]; };
layout(std430, binding = 1) buffer WeightsBuffer { float weights[]; };
layout(std430, binding = 2) buffer BiasesBuffer { float biases[]; };
layout(std430, binding = 3) buffer ForwardingLayersBuffer { ForwardingLayer layers[]; };

uniform int layerIdx;
// uniform int targetIdx;

void main() {
    int neuronLocalIdx = int(gl_GlobalInvocationID.x);
    int neuronGlobalIdx = layers[layerIdx].neurons.begin + neuronLocalIdx;

    int prevLayerBegin = layers[layerIdx].neurons.begin - layers[layerIdx].srcNeurons;

    float sum = 0.f;
    for(int i=0; i < layers[layerIdx].srcNeurons; i++){
        int weightIdx = layers[layerIdx].weights.begin + layers[layerIdx].dstNeurons * i + neuronLocalIdx;
        sum += weights[weightIdx] * neurons[prevLayerBegin + i];
    }
    float x = sum + biases[neuronGlobalIdx];

    neurons[neuronGlobalIdx] = log(1.f + exp(x)); // Softplus activation
}